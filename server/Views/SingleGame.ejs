<% 
// let ballsAll =game.players.map(p => {
//     return p.balls.map(ball => { return `<p>color:${ball.color},pos:${ball.position}</p>` }).join("")
let ballsAll = []
let r = 45 //%
let alpha = 2*Math.PI/64
game.players.forEach(p =>{
    // console.log(`${p.name} has ${p.balls.length} balls`);
    p.balls.forEach((b,i) =>{
        // console.log(`    ${p.name}'s ${i+1}. ball`);
        if (b.position<=64){
            // console.log(`  ring slot.player ${p.name} - pos: ${p.position}`);
            let phi = alpha * b.position + Math.PI/2
            let xPos = Math.round(Math.cos(phi) * r * 10)/10 + 50
            let yPos = Math.round(Math.sin(phi) * r * 10 )/10 + 50
            ballsAll.push({name: p.name, color:b.color, x: xPos, y: yPos})
        } else if (b.position >64){
            let xPos, yPos
            let lastDigit = b.position % 10
            let leadingDigits = parseInt(b.position/10)
            if (lastDigit <=4){
                // balls in "start slots" // 90 / 95%
                // console.log(`  start slot. lastDigit:${lastDigit}`);
                switch (leadingDigits){
                    case 7: //player 1
                        // console.log(`...1st player`);
                        xPos = 50 + 40 + (lastDigit-1) % 2 * 5
                        yPos = 50 + 40 + parseInt((lastDigit-1) / 2) * 5
                        break
                    case 8: //player 2
                        // console.log(`...2nd player`);
                        xPos = 50 - 40 - (lastDigit-1) % 2 * 5
                        yPos = 50 + 40 + parseInt((lastDigit-1) / 2) * 5
                        break
                    case 9: //player 3
                        // console.log(`...3rd player`);
                        xPos = 50 - 40 - (lastDigit-1) % 2 * 5
                        yPos = 50 - 40 - parseInt((lastDigit-1) / 2) * 5
                        break
                    case 10: //player 4
                        // console.log(`...1st player`);
                        xPos = 50 + 40 + (lastDigit-1) % 2 * 5
                        yPos = 50 - 40 - parseInt((lastDigit-1) / 2) * 5
                        break
                }
            } else { // home/Final slot
                // bottom:    O     |   left: O     | front:   O      |   right:     O  | 
                //          O   O   |           O   |                 |           O     | 
                //                  |           O   |        O   O    |           O     | 
                //            O     |         O     |          O      |              O  |
                // */
                let idxHomeSlot = lastDigit- 5 // [5,6,7,8] --> [0,1,2,3]
                // console.log(` home slot. idxHomeSlot:${idxHomeSlot}`);
                switch (leadingDigits){
                    case 7: //player 1 (bottom)
                        // 0,2 are with x=left=50
                        // 1,3 are with y = 70.25
                                // { pos: 75, left: 50, top: 82.20,  },     
                                // { pos: 76, left: 43.1, top: 70.25 },
                                // { pos: 77, left: 50, top: 66.35, },
                                // { pos: 78, left: 56.8, top: 70.25 }]
                        xPos = 50 + idxHomeSlot%2 * (idxHomeSlot-2) * 6.8 // for idxHomeSlot=[0,2] -> x=50, for i = [1] -> fact gets "-1" with "idxHomeSlot-2"
                        yPos = 70.25 + 0 * Math.pow(idxHomeSlot,3) + 4 *Math.pow(idxHomeSlot,2) - 16* idxHomeSlot + 12
                        // yPos = 70.25
                        break
                    case 8: //player 2
                        // [0,3] same x pos of 22
                        // [1,2] same x pos of 28.75
                            // {pos: 85, left: 22, top: 42,  },
                            // {pos: 86, left: 28.75, top: 46,  },
                            // {pos: 87, left: 28.75, top: 53.85,  },
                            // {pos: 88, left: 22, top: 57.8,  }]
                        // console.log(`...2nd player`);
                        xPos = 22 + (idxHomeSlot%2 + parseInt(idxHomeSlot/2))%2*6.75 // for i=[0,3] the factor will be "0"
                        yPos = 42 + 4 * idxHomeSlot + parseInt(idxHomeSlot/2)*4 // each gap 4%, but lower two additionally 4 %
                        break
                    case 9: //player 3
                        // { pos: 95, left: 50, top: 17.65 },
                        // { pos: 96, left: 56.8, top: 29.5 },
                        // { pos: 97, left: 50, top: 33.5 },
                        // { pos: 98, left: 43.1, top: 29.5}]
                        // console.log(`...3rd player`);
                        xPos = 50 + idxHomeSlot%2 * (idxHomeSlot-2)*(-1) * 6.8 // for idxHomeSlot=[0,2] -> x=50, for i = [1] -> fact gets "-1" with                        "idxHomeSlot-2"
                        yPos = 29.5 + 0 * Math.pow(idxHomeSlot,3) - 4 *Math.pow(idxHomeSlot,2) + 16* idxHomeSlot - 12
                        break
                    case 10: //player 4
                        // [0,3] same x pos of 78
                        // [1,2] same x pos of 71.3
                            // const posHomeSlotsRightPlayer = [
                            // {pos: 105, left: 78, top: 57.8 }
                            // {pos: 106, left: 71.3, top: 54 },
                            // {pos: 107, left: 71.3, top: 46 },
                            // {pos: 108, left: 78, top: 42 },
                        // console.log(`...4nd player`);
                        xPos = 78 - (idxHomeSlot%2 + parseInt(idxHomeSlot/2))%2 * 6.75 // for i=[0,3] the factor will be "0"
                        yPos = 57.8 - 4 * idxHomeSlot - parseInt(idxHomeSlot/2)*4 // each gap 4%, but lower two additionally 4 %
                        break
                    default:
                        // console.log(`...default`);
                        xPos = 50 
                        yPos = 50 
                        break
                } // close switch 
            } // close else{} for homeSlots

            ballsAll.push({name: p.name, color:b.color, x: xPos, y: yPos})

        }
    })
})
%>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.css" rel="stylesheet">
    <style>
        .game {
            background-color: #087;
            border-radius: 25px;
            margin: 1rem;
            padding: 1rem;
        }
        table,
        td,
        tr,
        th {
            border: 1px solid black;
            text-align: center;
        }

        td,
        th {
            padding: 0 .5rem;
        }
        ul{
            list-style: disc;
            margin-left: 2rem;
            /* padding: 2rem; */
        }
        .ball{
            position: absolute;
            width: 4%;
            height: 4%;
            transform: translate(-50%, -50%);
            border-radius: 50%;
            border: 1px solid black;
            box-shadow: 1px 1px 3px #222;
        }

    </style>
</head>
<body>
    <nav>
        <a href="/admin">back</a>
    </nav>
    <div class="flex-initial bg-red-500 rounded-md p-2 inline-block">
        <%- include('includes/PlayerInfo.ejs', {players: game.players}) %>
    </div>
    <div style="width:400px; position: relative;">
        <img src="/images/TACboard.jpg" alt="tacBoard">
        <%- ballsAll.map(ball => {
            return (`
            <div class="ball" style="background-color:${ball.color}; top: ${ball.y}%; left: ${ball.x}%">
            </div>`)
        }).join("") %>
        
    </div>
    <div>
        <%- JSON.stringify(ballsAll) %>
    </div>
</body>
</html>